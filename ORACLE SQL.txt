JOIN   
	1 조인(join)은 반드시 PK, FK의 관계로만 성립되지않는다. 어떠한 property든 간에 관계가 있을 경우 join이 가능하당   
	2 테이블 A,B,C,D를 순서대로 join했다면, 옵티마이저( query 해석기 )는 다음과 같은 순서로 join을 수행한다   
		(((A JOIN D) JOIN C ) JOIN B )   
		A 테이블과 D 테이블과의 집합에서 C 테이블과 집합을 마지막으로 B 테이블과 집합을 만든다.   	
PL/SQL   
	1 SQL은 "집합적"언이지만, PL/SQL은 "절차적"언어이다.   
	2 하지만 완전히 새로운 언어는 아니며, SQL을 뿌리로 두고 있다.   
	3 PL/SQL의 실행 단위는 블록이며, 선/실/예으로 선언부/실행부/예외부으로 나뉜다.   
	4 블록에 이름이 없으면 익명 블록, 있으면 함수, 프로시저, 패키지 등으로 분류된다.   
	5 이름부	IS(AS)  생략하면 "익명블록"이 된다.   
	   선언부 DECLARE( 선언 / 단언 / 신고하다 )   
		0 사용하지 않을 경우 생략할 수 있다.   
		1 각종 변수, 상수, 커서 등을 선언한다.   
		2 반드시 세미클론(;)을 붙혀야 한다.   
	   실행부 BEGIN   
		0 = 대신 := 을 사용한다.   
		1 실제 로직을 처리하는 부분이다. 이 부분에는 각종 문장(일반 SQL문, 조건문, 반복문 등)이 올 수 있고,    
		  이러한 문장을 사용해 비즈니스 로직을 구현하는 것이다.   
		2 SQL 문장 중 DDL문은 사용할 수 없고 DML 문만 사용할 수 있다.   
		3 반드시 세미콜론(;)을 붙여야 한다.   
	   예외부	EXCEPTION   
		1 예외처리를 하지 않을 경우 생략 할 수 있다.   
	   끝알림 END;   
	   출력	DBMS_OUTPUT.PUT_LINE( VALIDATION )   
		SET SERVEROUTPUT ON     --출력 내용을 볼 수 있는 명력어   
		SET TIMING ON                --수행 시간을 볼 수 있는 명력어   
		DECLARE   
			vi_num NUMBER;   
		BEGIN   
			vi_num := 100;   
			DBMS_OUTPUT.PUT_LINE( vi_num );   
		END;
PL/SQL 변수   
	1 BOOLEAN, PLS_INTEGER, BINARY_INTEGER
		1 BOOLEAN  : TRUE, FALSE, NULL세개의 데이터를 할당할 수 있다.   
		2 PLS_INTERGR, BINARY_INTEGER :  -2,147,483,648에서 2,147,483,647의 데이터를 할당할 수 있으며 NUMBER보다 약간 작은 값을 할 당할 수 있다.   \
		...   
	5 DML   
		DML의 정의부터 알아보자.   
			SELECT, INSERT, UPDATE / MERGE INTO, DELETE, UNION / UNION ALL / INTERSECT / MINUS   
		1 PL/SQL에서의 DML 사용   
			SET SERVEROUTPUT ON     --출력 내용을 볼 수 있는 명력어   
			SET TIMING ON                --수행 시간을 볼 수 있는 명력어   
			DECLARE   
				vs_player_name  VARCHAR2(100);   
				vs_team_name    VARCHAR2(100);   
			BEGIN   
				SELECT p.player_name, t.team_name   
				INTO vs_player_name, vs_team_name  	--"INTO 키워드를 이용해 변수에 데이터를 할당합니다.   
								--이때 SELECT의 결과가 다수ROW라면 오류가 발생한다.   
								--즉 선택하는 컬럼에 따라 변수의 순서, 개수, 데이터 타입을 반드시 맞춰 줘야 한다.   
   
				FROM player p, team t   
				WHERE p.team_id = t.team_id   
				AND p.player_name = '서덕규';   
   
				DBMS_OUTPUT.PUT_LINE( vs_player_name || '의 팀은 ' || vs_team_name || ' 입니다.' );   
			END;   
		2 %TYPE 키워드   
			1 (SELECT을 이용해 조회되는 COLUMN의 PROPERY의 데이터 타입을 자동으로 설정해준다.   
			2     DECLARE   
				vs_player_name player.player_name%TYPE;   
				vs_team_name   team.team_name%TYPE;   
   
	6 PRAGMA 키워드   
	7 라벨   